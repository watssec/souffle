/*
 * @File Bytecode.dl
 *
 * Bytecode of the language
 */

#ifndef _BYTECODE_
#define _BYTECODE_

#include "Basis.dl"
#include "Typing.dl"

/*
 * Definition of bytecode operations
 */

.type Expr =
      LoadBool {r: Variable, constant: B}
    | LoadNumber {r: Variable, constant: N}
    | LoadBitvec {r: Variable, size: number, constant: I}

.decl HasExpr(expr: Expr)

/*
 * Typing rules
 */

// constant loading
HasType(r, BOOL) :- HasExpr($LoadBool(r, _)).

HasType(r, NUMBER) :- HasExpr($LoadNumber(r, _)).

HasType(r, BITVEC(size)) :- HasExpr($LoadBitvec(r, size, _)).

// unit tests (if enabled)
#ifdef UNIT_TEST
.decl BytecodeUnitTest()

// bool
HasExpr($LoadBool("v_bool_1", $True())).

// number
HasExpr($LoadNumber("v_int_1", $N0())).

// bitvec
HasExpr($LoadBitvec("v_bv0", 0, $H())).
HasExpr($LoadBitvec("v_bv1_0", 1, $B0($H()))).
HasExpr($LoadBitvec("v_bv1_1", 1, $B1($H()))).

// test procedures
BytecodeUnitTest() :-
    IS_TYPE("v_bool_1", BOOL),
    IS_TYPE("v_int_1", NUMBER),
    IS_TYPE("v_bv0", BITVEC(0)),
    IS_TYPE("v_bv1_0", BITVEC(1)),
    IS_TYPE("v_bv1_1", BITVEC(1)).

.output BytecodeUnitTest
#endif

#endif /* _BYTECODE_ */